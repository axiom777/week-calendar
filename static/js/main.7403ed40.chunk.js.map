{"version":3,"sources":["interfaces.ts","handlers.ts","Cell.tsx","mockEvents.ts","Event.tsx","EventsGroup.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["config","startDate","Date","endDate","cellMinuteRange","cellHeightPx","prepareCalndar","diffTime","getTime","dayCount","Math","ceil","result","start","i","day","endOfDay","timeForm","timeTo","push","Cell","this","props","fromStr","calendrEvents","toLocaleString","hour","minute","toStr","hoursString","attrs","toISOString","style","height","className","title","React","Component","mockEvents","from","to","descr","Event","localeDate","year","month","position","backgroundColor","getRandomColor","boxSizing","padding","overflow","filter","color","floor","random","EventsGrop","events","group","console","log","preparedEvents","prepareEventsColumns","map","event","sortedByPeriodEvents","sort","a","b","groupedEvents","isFoundSpace","length","column","eventInGroup","groupFrom","groupTo","isFirst","isLast","unshift","prevTo","splice","eventsWithPosition","columnsTotal","forEach","columnIndex","createPosition","data","weekRef","weekElement","current","newFrom","newTo","topMinutsDiff","bottomMinutsDiff","getMinutes","setMinutes","setHours","getHours","startDOMElement","querySelector","endDOMElement","HTMLElement","cellHeight","clientHeight","minuteHeight","topOffsetInPx","bottomOffsetInPx","cellTopOffset","offsetTop","cellBottomOffset","width","clientWidth","top","left","offsetLeft","App","createRef","state","calendar","mounted","setState","ref","time","index","groupEvents","EventsGroup","lnip","dates","currentLnip","toLnip","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7403ed40.chunk.js","sourcesContent":["import { CalendarEvent } from \"./mockEvents\";\n\nexport type Hour = {\n  timeForm: Date;\n  timeTo: Date;\n  calendrEvents?: CalendarEvent;\n};\nexport type Day = Hour[];\n\nexport const config = {\n  startDate: new Date(\"2021-12-06T00:00:00\"),\n  endDate: new Date(\"2021-12-12T23:59:59\"),\n  cellMinuteRange: 30,\n  cellHeightPx: 25,\n};\n\nexport type AppState = {\n  calendar: Day[];\n  mounted: boolean;\n};\n\nexport type GroupEvent = { dates: [Date, Date]; events: CalendarEvent[] };\n","import { config, Hour, Day } from \"./interfaces\";\n\nexport function prepareCalndar(): Day[] {\n  const diffTime = config.endDate.getTime() - config.startDate.getTime();\n  const dayCount = Math.ceil(diffTime / (3600 * 24 * 1000));\n\n  const result: Day[] = [];\n\n  let start = new Date(config.startDate);\n  for (let i = 0; i < dayCount; i++) {\n    const day: Hour[] = [];\n    const endOfDay = new Date(start.getTime() + 86400000 - 1);\n\n    while (start.getTime() < endOfDay.getTime()) {\n      const timeForm = new Date(start);\n      start = new Date(start.getTime() + config.cellMinuteRange * 60000);\n      const timeTo = new Date(start);\n      day.push({ timeForm, timeTo });\n    }\n    result.push(day);\n  }\n  return result;\n}\n","import React from \"react\";\nimport { config, Hour } from \"./interfaces\";\n\ntype CellProps = Hour;\nclass Cell extends React.Component<CellProps> {\n  render() {\n    // eslint-disable-next-line\n    const { timeForm, timeTo, calendrEvents } = this.props;\n    const fromStr = timeForm.toLocaleString(\"RU-ru\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n    const toStr = timeTo.toLocaleString(\"RU-ru\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n    const hoursString = `${fromStr} - ${toStr}`;\n\n    const attrs = {\n      \"data-from\": new Date(timeForm).toISOString(),\n      \"data-to\": new Date(timeTo).toISOString(),\n    };\n\n    return (\n      <div\n        style={{ height: `${config.cellHeightPx}px` }}\n        className=\"time\"\n        title={hoursString}\n        {...attrs}\n      ></div>\n    );\n  }\n}\n\nexport default Cell;\n","export type CalendarEvent = {\n  from: Date;\n  to: Date;\n  title: string;\n  descr: string;\n};\n\nexport const mockEvents: CalendarEvent[] = [\n  {\n    from: new Date(\"2021-12-06T11:10:00Z\"),\n    to: new Date(\"2021-12-06T12:10:00Z\"),\n    title: \"Event 0\",\n    descr:\n      \"Event DescriptionEvent DescriptionEvent DescriptionEvent DescriptionEvent Description\"\n  },\n  {\n    from: new Date(\"2021-12-06T11:11:00Z\"),\n    to: new Date(\"2021-12-06T12:30:00Z\"),\n    title: \"Event 1\",\n    descr:\n      \"Event DescriptionEvent DescriptionEvent DescriptionEvent DescriptionEvent Description\"\n  },\n  {\n    from: new Date(\"2021-12-06T12:00:00Z\"),\n    to: new Date(\"2021-12-06T15:10:00Z\"),\n    title: \"Event 2\",\n    descr:\n      \"Event DescriptionEvent DescriptionEvent DescriptionEvent DescriptionEvent Description\"\n  },\n  {\n    from: new Date(\"2021-12-06T15:00:00Z\"),\n    to: new Date(\"2021-12-06T17:30:00Z\"),\n    title: \"Event 3\",\n    descr:\n      \"Event DescriptionEvent DescriptionEvent DescriptionEvent DescriptionEvent Description\"\n  },\n  {\n    from: new Date(\"2021-12-06T18:20:00Z\"),\n    to: new Date(\"2021-12-06T19:00:00Z\"),\n    title: \"Event 4\",\n    descr:\n      \"Event DescriptionEvent DescriptionEvent DescriptionEvent DescriptionEvent Description\"\n  },\n  {\n    from: new Date(\"2021-12-07T12:30:00Z\"),\n    to: new Date(\"2021-12-07T15:30:00Z\"),\n    title: \"Event 5\",\n    descr:\n      \"Event DescriptionEvent DescriptionEvent DescriptionEvent DescriptionEvent Description\"\n  },\n  {\n    from: new Date(\"2021-12-09T02:30:00Z\"),\n    to: new Date(\"2021-12-09T15:30:00Z\"),\n    title: \"Event 6\",\n    descr:\n      \"Event DescriptionEvent DescriptionEvent DescriptionEvent DescriptionEvent Description\"\n  }\n];\n\n","import React from \"react\";\nimport { EventWithPosition } from \"./EventsGroup\";\n\ntype EventProps = EventWithPosition;\n\nexport default class Event extends React.Component<EventProps> {\n  componentDidMount() {}\n\n  render() {\n    const { from, to, title, descr, position } = this.props;\n    const style: React.HTMLAttributes<HTMLDivElement>[\"style\"] = {\n      ...position,\n      position: \"absolute\",\n      backgroundColor: this.getRandomColor(),\n      boxSizing: \"border-box\",\n      padding: 5,\n      overflow: \"hidden\",\n    };\n    return (\n      <div\n        className=\"event\"\n        style={style}\n        title={`${from.toLocaleString(\n          \"RU-ru\",\n          this.localeDate\n        )} - ${to.toLocaleString(\"RU-ru\", this.localeDate)}`}\n      >\n        {title}\n        <p style={{ filter: \"invert(100%)\", color: style.backgroundColor }}>\n          {descr}\n        </p>\n      </div>\n    );\n  }\n\n  localeDate: Intl.DateTimeFormatOptions = {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\",\n  };\n\n  getRandomColor() {\n    var letters = \"0123456789ABCDEF\";\n    var color = \"#\";\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n}\n","import React from \"react\";\nimport { GroupEvent } from \"./interfaces\";\nimport Event from \"./Event\";\n\nexport type EventWithPosition = GroupEvent[\"events\"][number] & {\n  position: React.HTMLAttributes<HTMLDivElement>[\"style\"];\n};\n\ntype EventsGropProps = {\n  group: GroupEvent;\n  weekRef: React.RefObject<HTMLDivElement>;\n};\n\nclass EventsGrop extends React.Component<EventsGropProps> {\n  render() {\n    const { events } = this.props.group;\n    console.log(events)\n\n    const preparedEvents = this.prepareEventsColumns(events);\n\n    if (!preparedEvents) {\n      return null;\n    }\n\n    return (\n      <div>\n        {preparedEvents.map((event) => (\n          <Event {...event} />\n        ))}\n      </div>\n    );\n  }\n\n  private prepareEventsColumns(\n    events: GroupEvent[\"events\"]\n  ): EventWithPosition[] | null {\n    const sortedByPeriodEvents = events.sort(\n      (a, b) =>\n        b.to.getTime() - b.from.getTime() - (a.to.getTime() - a.from.getTime())\n    );\n\n    const groupedEvents: GroupEvent[\"events\"][] = [];\n\n    // creating group columns\n    for (let event of sortedByPeriodEvents) {\n      const { from, to } = event;\n\n      let isFoundSpace = false;\n\n      if (groupedEvents.length === 0) {\n        groupedEvents.push([event]);\n        isFoundSpace = true;\n      }\n\n      for (let column of groupedEvents) {\n        if (isFoundSpace) break;\n\n        for (let i = 0; i < column.length; i++) {\n          const eventInGroup = column[i];\n          const { from: groupFrom, to: groupTo } = eventInGroup;\n\n          const isFirst = i === 0;\n          const isLast = i === column.length - 1;\n\n          // can I insert before\n          if (isFirst && to.getTime() <= groupFrom.getTime()) {\n            column.unshift(event);\n            isFoundSpace = true;\n            break;\n          }\n\n          //  can I insert to end\n          if (isLast && from.getTime() >= groupTo.getTime()) {\n            column.push(event);\n            isFoundSpace = true;\n            break;\n          }\n\n          //  can I insert between prev and current\n          if (!isFirst) {\n            const { to: prevTo } = column[i - 1];\n            if (\n              from.getTime() >= prevTo.getTime() &&\n              to.getTime() <= groupFrom.getTime()\n            ) {\n              isFoundSpace = true;\n              column.splice(i, 0, event);\n              break;\n            }\n          }\n        }\n      }\n      if (!isFoundSpace) {\n        groupedEvents.push([event]);\n      }\n    }\n\n    // Add positions to Events\n    const eventsWithPosition: EventWithPosition[] = [];\n    const columnsTotal = groupedEvents.length;\n\n    if (columnsTotal === 0) return null;\n\n    groupedEvents.forEach((column, columnIndex) => {\n      column.forEach((event) => {\n        const { from, to } = event;\n        const position = this.createPosition({\n          from,\n          to,\n          columnsTotal,\n          column: columnIndex,\n        });\n        if (!position) return;\n        eventsWithPosition.push({ ...event, position });\n      });\n    });\n\n    return eventsWithPosition;\n  }\n\n  private createPosition(data: {\n    from: Date;\n    to: Date;\n    column: number;\n    columnsTotal: number;\n  }): {\n    top: number;\n    left: number;\n    height: number;\n    width: number;\n  } | void {\n    const { weekRef } = this.props;\n    const { from, to, column, columnsTotal } = data;\n    const weekElement = weekRef.current;\n    if (weekElement === null) return;\n\n    // normalizing periods\n    const newFrom = new Date(from);\n    const newTo = new Date(to);\n    let topMinutsDiff = 0;\n    let bottomMinutsDiff = 0;\n\n    if (from.getMinutes() < 30) {\n      topMinutsDiff = from.getMinutes();\n      newFrom.setMinutes(0);\n    } else {\n      topMinutsDiff = from.getMinutes() - 30;\n      newFrom.setMinutes(30);\n    }\n\n    if (to.getMinutes() > 0 && to.getMinutes() < 30) {\n      bottomMinutsDiff = to.getMinutes();\n      newTo.setMinutes(30);\n    } else if (to.getMinutes() > 30) {\n      bottomMinutsDiff = to.getMinutes() - 30;\n      newTo.setMinutes(30);\n      newTo.setHours(newTo.getHours() + 1);\n    }\n\n    const startDOMElement = weekElement.querySelector(\n      `div[data-from=\"${newFrom.toISOString()}\"]`\n    );\n\n    const endDOMElement = weekElement.querySelector(\n      `div[data-to=\"${newTo.toISOString()}\"]`\n    );\n    const isElementsExists =\n      startDOMElement instanceof HTMLElement &&\n      endDOMElement instanceof HTMLElement;\n    if (!isElementsExists) return;\n\n    const cellHeight = endDOMElement.clientHeight;\n    const minuteHeight = cellHeight / 30;\n\n    const topOffsetInPx = topMinutsDiff * minuteHeight;\n    const bottomOffsetInPx = bottomMinutsDiff * minuteHeight;\n\n    const cellTopOffset = startDOMElement.offsetTop;\n    const cellBottomOffset = endDOMElement.offsetTop + cellHeight;\n\n    const widthElement = startDOMElement.clientWidth;\n    const width = widthElement / columnsTotal;\n    const top = cellTopOffset + topOffsetInPx + 1; //1px for border\n    const left = startDOMElement.offsetLeft + width * column + 1; //1px for border\n    const height =\n      cellBottomOffset - cellTopOffset - topOffsetInPx - bottomOffsetInPx;\n    return { top, left, height, width: width };\n  }\n}\n\nexport default EventsGrop;\n","import \"./App.css\";\nimport { prepareCalndar } from \"./handlers\";\nimport { AppState, GroupEvent } from \"./interfaces\";\nimport Cell from \"./Cell\";\nimport React from \"react\";\nimport { mockEvents } from \"./mockEvents\";\nimport EventsGroup from \"./EventsGroup\";\n\nexport default class App extends React.Component<{}, AppState> {\n  public weekRef = React.createRef<HTMLDivElement>();\n\n  constructor(props: AppState) {\n    super(props);\n    this.state = {\n      calendar: prepareCalndar(),\n      mounted: false,\n    };\n  }\n  componentDidMount() {\n    this.setState({ mounted: true });\n  }\n\n  render() {\n    const { calendar } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"weekCalendar\" ref={this.weekRef}>\n          {calendar.map((day, i) => (\n            <div key={`${i}Day`} className=\"day\">\n              {day.map((time, index) => (\n                <Cell key={`${index}+cell`} {...time} />\n              ))}\n            </div>\n          ))}\n          {this.state.mounted &&\n            this.groupEvents().map((group, index) => (\n              <EventsGroup key={index} group={group} weekRef={this.weekRef} />\n            ))}\n        </div>\n      </div>\n    );\n  }\n\n  groupEvents() {\n    const events = mockEvents.sort(\n      (a, b) => a.from.getTime() - b.from.getTime()\n    );\n\n    // longest not intersected periods\n    const lnip: GroupEvent[] = [];\n\n    // searching for longest not intersected continues periods\n    for (let event of events) {\n      const { from, to } = event;\n      const isFirst = lnip.length === 0;\n      if (isFirst) lnip.push({ dates: [from, to], events: [event] });\n      if (!isFirst) {\n        const currentLnip = lnip[lnip.length - 1];\n        const toLnip = currentLnip.dates[1];\n\n        if (from.getTime() < toLnip.getTime()) {\n          currentLnip.dates[1] = new Date(\n            Math.max(toLnip.getTime(), to.getTime())\n          );\n          currentLnip.events.push(event);\n        } else {\n          lnip.push({ dates: [from, to], events: [event] });\n        }\n      }\n    }\n\n    return lnip;\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}